/*
 * Simplex Noise and Noise Smoothing function definitions 
 *
 * These algorithms were originally designed by Ken Perlin, but this code has been
 * adapted from the implementations written by Stefan Gustavson (stegu@itn.liu.se)
 * and Eliot Eshelman (http://www.6by9.net/).
 *
 */

#include <stdlib.h>
#include <stdio.h>

#include "simplexnoise.h"

/* 2D Simplex Noise functions

Raw Simplex noise functions return the value generated by Ken's algorithm.

Multi-Octave Simplex noise functions combine multiple noise values to create a
more complex result. Each successive layer of noise is adjusted and scaled.

*/


// 2D Multi-octave Simplex noise.
//
// For each octave, a higher frequency/lower amplitude function will be added to the original.
// The higher the persistence, the more of each succeeding octave will be added.
float octave_noise_2d( const float octaves, const float persistence, const float scale, const float x, const float y ) 
{
    float total = 0;
    float frequency = scale;
    float amplitude = 1;

    // We have to keep track of the largest possible amplitude,
    // because each octave adds more, and we need a value in [-1, 1].
    float maxAmplitude = 0;

    for( int i=0; i < octaves; i++ ) 
    {
        total += raw_noise_2d( x * frequency, y * frequency ) * amplitude;

        frequency *= 2;
        maxAmplitude += amplitude;
        amplitude *= persistence;
    }

    return total / maxAmplitude;
}


// 2D raw Simplex noise
float raw_noise_2d( const float x, const float y ) 
{
    // Noise contributions from the three corners
    float n0, n1, n2;

    // Skew the input space to determine which simplex cell we're in
    float F2 = 0.5 * (sqrtf(3.0) - 1.0);
    // Hairy factor for 2D
    float s = (x + y) * F2;
    int i = fastfloor( x + s );
    int j = fastfloor( y + s );

    float G2 = (3.0 - sqrtf(3.0)) / 6.0;
    float t = (i + j) * G2;
    // Unskew the cell origin back to (x,y) space
    float X0 = i-t;
    float Y0 = j-t;
    // The x,y distances from the cell origin
    float x0 = x-X0;
    float y0 = y-Y0;

    // For the 2D case, the simplex shape is an equilateral triangle.
    // Determine which simplex we are in.
    int i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
    if(x0>y0) {i1=1; j1=0;} // lower triangle, XY order: (0,0)->(1,0)->(1,1)
    else {i1=0; j1=1;} // upper triangle, YX order: (0,0)->(0,1)->(1,1)

    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
    // c = (3-sqrt(3))/6
    float x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
    float y1 = y0 - j1 + G2;
    float x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords
    float y2 = y0 - 1.0 + 2.0 * G2;

    // Work out the hashed gradient indices of the three simplex corners
    int ii = i & 255;
    int jj = j & 255;
    int gi0 = perm[ii+perm[jj]] % 12;
    int gi1 = perm[ii+i1+perm[jj+j1]] % 12;
    int gi2 = perm[ii+1+perm[jj+1]] % 12;

    // Calculate the contribution from the three corners
    float t0 = 0.5 - x0*x0-y0*y0;
    if(t0 < 0) 
        n0 = 0.0;
    else 
    {
        t0 *= t0;
        n0 = t0 * t0 * dot(grad3[gi0], x0, y0); // (x,y) of grad3 used for 2D gradient
    }

    float t1 = 0.5 - x1*x1-y1*y1;
    if(t1 < 0) 
        n1 = 0.0;
    else 
    {
        t1 *= t1;
        n1 = t1 * t1 * dot(grad3[gi1], x1, y1);
    }

    float t2 = 0.5 - x2*x2-y2*y2;
    if( t2 < 0) 
        n2 = 0.0;
    else 
    {
        t2 *= t2;
        n2 = t2 * t2 * dot(grad3[gi2], x2, y2);
    }

    // Add contributions from each corner to get the final noise value.
    // The result is scaled to return values in the interval [-1,1].
    return 70.0 * (n0 + n1 + n2);
}

int fastfloor( const float x ) { return x > 0 ? (int) x : (int) x - 1; }

float dot( const int* g, const float x, const float y ) { return g[0]*x + g[1]*y; }
float dot( const int* g, const float x, const float y, const float z ) { return g[0]*x + g[1]*y + g[2]*z; }
float dot( const int* g, const float x, const float y, const float z, const float w ) { return g[0]*x + g[1]*y + g[2]*z + g[3]*w; }


double smoothNoise(double x, double y, float octaves, float persistence, float amplitude)
{  
   // Get fractional part of x and y
   double fractX = x - int(x);
   double fractY = y - int(y);
   
   // Wrap around
   int x1 = (int(x) + NOISE_WIDTH) % NOISE_WIDTH;
   int y1 = (int(y) + NOISE_HEIGHT) % NOISE_HEIGHT;
   
   // Neighbor values
   int x2 = (x1 + NOISE_WIDTH - 1) % NOISE_WIDTH;
   int y2 = (y1 + NOISE_HEIGHT - 1) % NOISE_HEIGHT;

   // Smooth the noise with bilinear interpolation
   double value = 0.0;
   value += fractX       * fractY       * octave_noise_2d(octaves, persistence, amplitude,x1,y1);
   value += fractX       * (1 - fractY) * octave_noise_2d(octaves, persistence, amplitude,x1,y2);
   value += (1 - fractX) * fractY       * octave_noise_2d(octaves, persistence, amplitude,x2,y1);
   value += (1 - fractX) * (1 - fractY) * octave_noise_2d(octaves, persistence, amplitude,x2,y2);

   return value;
}

double turbulence(double x, double y, double size, float octaves, float persistence, float amplitude)
{
    double value = 0.0, initialSize = size;
    
    while(size >= 1)
    {
        value += smoothNoise(x / size, y / size, octaves, persistence, amplitude) * size;
        size /= 2.0;
    }
    
    return(value / initialSize);
}